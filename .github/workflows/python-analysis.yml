name: Python Analysis
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - master

jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/setup.py
            **/pyproject.toml

      - name: Create reports directory
        run: mkdir -p reports

      - name: Install dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          
          # Install project dependencies if requirements file exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f setup.py ]; then
            pip install -e .
          elif [ -f pyproject.toml ]; then
            pip install -e .
          fi
          
          # Install analysis tools
          pip install flake8 pylint black mypy isort types-requests types-setuptools
          
          # List installed packages for debugging
          pip freeze > reports/installed-packages.txt
        continue-on-error: false

      - name: Format check with black
        id: black
        run: |
          echo "## Python Format Check Results" > reports/black-report.md
          echo "Running Black format check..."
          
          # Run black in check mode (no changes)
          black_output=$(python -m black --check --diff . 2>&1) || black_exit_code=$?
          
          if [ -n "$black_exit_code" ]; then
            echo "❌ Black check failed. Code needs reformatting." | tee -a reports/black-report.md
            echo '```diff' >> reports/black-report.md
            echo "$black_output" >> reports/black-report.md
            echo '```' >> reports/black-report.md
            echo "To fix, run: black ." | tee -a reports/black-report.md
            exit_code=1
          else
            echo "✅ Black check passed. Code is properly formatted." | tee -a reports/black-report.md
          fi
        continue-on-error: true

      - name: Lint with flake8
        id: flake8
        run: |
          echo "## Python Flake8 Results" > reports/flake8-report.md
          echo "Running Flake8 analysis..."
          
          # Run flake8 with specific rules
          flake8_output=$(python -m flake8 --count --select=E9,F63,F7,F82 --show-source --statistics 2>&1) || true
          
          if [ -n "$flake8_output" ]; then
            echo "❌ Flake8 found critical errors:" | tee -a reports/flake8-report.md
            echo '```' >> reports/flake8-report.md
            echo "$flake8_output" >> reports/flake8-report.md
            echo '```' >> reports/flake8-report.md
            exit_code=1
          else
            echo "✅ No critical Flake8 errors found." | tee -a reports/flake8-report.md
          fi
          
          # Run flake8 with more inclusive rules but just for reporting
          echo "### Extended Flake8 Check" >> reports/flake8-report.md
          extended_output=$(python -m flake8 --max-complexity=10 --max-line-length=127 --statistics 2>&1) || true
          
          if [ -n "$extended_output" ]; then
            echo "ℹ️ Flake8 found style issues:" >> reports/flake8-report.md
            echo '```' >> reports/flake8-report.md
            echo "$extended_output" >> reports/flake8-report.md
            echo '```' >> reports/flake8-report.md
          else
            echo "✅ No style issues found." >> reports/flake8-report.md
          fi
        continue-on-error: true

      - name: Lint with pylint
        id: pylint
        run: |
          echo "## Python Pylint Results" > reports/pylint-report.md
          echo "Running Pylint analysis..."
          
          # Find all Python files and directories with Python files
          python_files=$(find . -type f -name "*.py" | grep -v "__pycache__" | grep -v ".git" | grep -v "venv")
          python_dirs=$(find . -type d -not -path "*/\.*" -not -path "*/venv*" -not -path "*/__pycache__*")
          
          # Run pylint if there are Python files
          if [ -n "$python_files" ]; then
            # Create a basic pylint config if one doesn't exist
            if [ ! -f .pylintrc ] && [ ! -f pyproject.toml ]; then
              pylint --generate-rcfile > .pylintrc.generated
              pylint_config="--rcfile=.pylintrc.generated"
            else
              pylint_config=""
            fi
            
            # Run pylint on all Python files
            pylint_output=$(python -m pylint $pylint_config $python_files 2>&1) || pylint_exit_code=$?
            pylint_score=$(echo "$pylint_output" | grep -o "Your code has been rated at [-0-9.]*/10" || echo "Score not found")
            
            echo "### Pylint Score" >> reports/pylint-report.md
            echo "$pylint_score" >> reports/pylint-report.md
            echo "" >> reports/pylint-report.md
            
            echo "### Pylint Output" >> reports/pylint-report.md
            echo '```' >> reports/pylint-report.md
            echo "$pylint_output" >> reports/pylint-report.md
            echo '```' >> reports/pylint-report.md
            
            if [ -n "$pylint_exit_code" ] && [ "$pylint_exit_code" -ne 0 ]; then
              echo "❌ Pylint found issues. See report for details." | tee -a reports/pylint-report.md
            else
              echo "✅ Pylint check passed." | tee -a reports/pylint-report.md
            fi
          else
            echo "No Python files found to analyze." >> reports/pylint-report.md
          fi
        continue-on-error: true

      - name: Type check with mypy
        id: mypy
        run: |
          echo "## Python Type Check Results" > reports/mypy-report.md
          echo "Running MyPy type checking..."
          
          # Find all Python files
          python_files=$(find . -type f -name "*.py" | grep -v "__pycache__" | grep -v ".git" | grep -v "venv")
          
          if [ -n "$python_files" ]; then
            # Create a basic mypy config if one doesn't exist
            if [ ! -f mypy.ini ] && [ ! -f .mypy.ini ] && [ ! -f pyproject.toml ]; then
              echo "[mypy]" > mypy.ini.generated
              echo "python_version = 3.9" >> mypy.ini.generated
              echo "warn_return_any = True" >> mypy.ini.generated
              echo "warn_unused_configs = True" >> mypy.ini.generated
              echo "disallow_untyped_defs = False" >> mypy.ini.generated
              echo "disallow_incomplete_defs = False" >> mypy.ini.generated
              mypy_config="--config-file=mypy.ini.generated"
            else
              mypy_config=""
            fi
            
            # Run mypy
            mypy_output=$(python -m mypy $mypy_config $python_files 2>&1) || mypy_exit_code=$?
            
            if [ -n "$mypy_exit_code" ] && [ "$mypy_exit_code" -ne 0 ]; then
              echo "❌ MyPy found type errors:" | tee -a reports/mypy-report.md
              echo '```' >> reports/mypy-report.md
              echo "$mypy_output" >> reports/mypy-report.md
              echo '```' >> reports/mypy-report.md
            else
              echo "✅ MyPy check passed." | tee -a reports/mypy-report.md
            fi
          else
            echo "No Python files found to analyze." >> reports/mypy-report.md
          fi
        continue-on-error: true

      - name: Combine reports to summary
        if: always()
        run: |
          echo "# Python Analysis Results" > $GITHUB_STEP_SUMMARY
          
          if [ -f reports/black-report.md ]; then
            cat reports/black-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f reports/flake8-report.md ]; then
            cat reports/flake8-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f reports/pylint-report.md ]; then
            cat reports/pylint-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f reports/mypy-report.md ]; then
            cat reports/mypy-report.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-analysis-reports
          path: reports/
          if-no-files-found: ignore
